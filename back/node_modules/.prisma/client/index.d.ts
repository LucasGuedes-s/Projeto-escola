
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model turmas
 * 
 */
export type turmas = {
  id: number
}

/**
 * Model professores
 * 
 */
export type professores = {
  id: number
  matricula: number
  senha: string
}

/**
 * Model alunos
 * 
 */
export type alunos = {
  id: number
  email: string
  senha: string
  nome: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Turmas
 * const turmas = await prisma.turmas.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Turmas
   * const turmas = await prisma.turmas.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.turmas`: Exposes CRUD operations for the **turmas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Turmas
    * const turmas = await prisma.turmas.findMany()
    * ```
    */
  get turmas(): Prisma.turmasDelegate<GlobalReject>;

  /**
   * `prisma.professores`: Exposes CRUD operations for the **professores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professores
    * const professores = await prisma.professores.findMany()
    * ```
    */
  get professores(): Prisma.professoresDelegate<GlobalReject>;

  /**
   * `prisma.alunos`: Exposes CRUD operations for the **alunos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alunos
    * const alunos = await prisma.alunos.findMany()
    * ```
    */
  get alunos(): Prisma.alunosDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    turmas: 'turmas',
    professores: 'professores',
    alunos: 'alunos'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TurmasCountOutputType
   */


  export type TurmasCountOutputType = {
    alunos: number
  }

  export type TurmasCountOutputTypeSelect = {
    alunos?: boolean
  }

  export type TurmasCountOutputTypeGetPayload<S extends boolean | null | undefined | TurmasCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TurmasCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TurmasCountOutputTypeArgs)
    ? TurmasCountOutputType 
    : S extends { select: any } & (TurmasCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TurmasCountOutputType ? TurmasCountOutputType[P] : never
  } 
      : TurmasCountOutputType




  // Custom InputTypes

  /**
   * TurmasCountOutputType without action
   */
  export type TurmasCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TurmasCountOutputType
     */
    select?: TurmasCountOutputTypeSelect | null
  }



  /**
   * Count Type AlunosCountOutputType
   */


  export type AlunosCountOutputType = {
    turmas: number
  }

  export type AlunosCountOutputTypeSelect = {
    turmas?: boolean
  }

  export type AlunosCountOutputTypeGetPayload<S extends boolean | null | undefined | AlunosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AlunosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AlunosCountOutputTypeArgs)
    ? AlunosCountOutputType 
    : S extends { select: any } & (AlunosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AlunosCountOutputType ? AlunosCountOutputType[P] : never
  } 
      : AlunosCountOutputType




  // Custom InputTypes

  /**
   * AlunosCountOutputType without action
   */
  export type AlunosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AlunosCountOutputType
     */
    select?: AlunosCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model turmas
   */


  export type AggregateTurmas = {
    _count: TurmasCountAggregateOutputType | null
    _avg: TurmasAvgAggregateOutputType | null
    _sum: TurmasSumAggregateOutputType | null
    _min: TurmasMinAggregateOutputType | null
    _max: TurmasMaxAggregateOutputType | null
  }

  export type TurmasAvgAggregateOutputType = {
    id: number | null
  }

  export type TurmasSumAggregateOutputType = {
    id: number | null
  }

  export type TurmasMinAggregateOutputType = {
    id: number | null
  }

  export type TurmasMaxAggregateOutputType = {
    id: number | null
  }

  export type TurmasCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type TurmasAvgAggregateInputType = {
    id?: true
  }

  export type TurmasSumAggregateInputType = {
    id?: true
  }

  export type TurmasMinAggregateInputType = {
    id?: true
  }

  export type TurmasMaxAggregateInputType = {
    id?: true
  }

  export type TurmasCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type TurmasAggregateArgs = {
    /**
     * Filter which turmas to aggregate.
     */
    where?: turmasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of turmas to fetch.
     */
    orderBy?: Enumerable<turmasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: turmasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned turmas
    **/
    _count?: true | TurmasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurmasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurmasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurmasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurmasMaxAggregateInputType
  }

  export type GetTurmasAggregateType<T extends TurmasAggregateArgs> = {
        [P in keyof T & keyof AggregateTurmas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurmas[P]>
      : GetScalarType<T[P], AggregateTurmas[P]>
  }




  export type TurmasGroupByArgs = {
    where?: turmasWhereInput
    orderBy?: Enumerable<turmasOrderByWithAggregationInput>
    by: TurmasScalarFieldEnum[]
    having?: turmasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurmasCountAggregateInputType | true
    _avg?: TurmasAvgAggregateInputType
    _sum?: TurmasSumAggregateInputType
    _min?: TurmasMinAggregateInputType
    _max?: TurmasMaxAggregateInputType
  }


  export type TurmasGroupByOutputType = {
    id: number
    _count: TurmasCountAggregateOutputType | null
    _avg: TurmasAvgAggregateOutputType | null
    _sum: TurmasSumAggregateOutputType | null
    _min: TurmasMinAggregateOutputType | null
    _max: TurmasMaxAggregateOutputType | null
  }

  type GetTurmasGroupByPayload<T extends TurmasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TurmasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurmasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurmasGroupByOutputType[P]>
            : GetScalarType<T[P], TurmasGroupByOutputType[P]>
        }
      >
    >


  export type turmasSelect = {
    id?: boolean
    alunos?: boolean | turmas$alunosArgs
    _count?: boolean | TurmasCountOutputTypeArgs
  }


  export type turmasInclude = {
    alunos?: boolean | turmas$alunosArgs
    _count?: boolean | TurmasCountOutputTypeArgs
  }

  export type turmasGetPayload<S extends boolean | null | undefined | turmasArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? turmas :
    S extends undefined ? never :
    S extends { include: any } & (turmasArgs | turmasFindManyArgs)
    ? turmas  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'alunos' ? Array < alunosGetPayload<S['include'][P]>>  :
        P extends '_count' ? TurmasCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (turmasArgs | turmasFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'alunos' ? Array < alunosGetPayload<S['select'][P]>>  :
        P extends '_count' ? TurmasCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof turmas ? turmas[P] : never
  } 
      : turmas


  type turmasCountArgs = 
    Omit<turmasFindManyArgs, 'select' | 'include'> & {
      select?: TurmasCountAggregateInputType | true
    }

  export interface turmasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Turmas that matches the filter.
     * @param {turmasFindUniqueArgs} args - Arguments to find a Turmas
     * @example
     * // Get one Turmas
     * const turmas = await prisma.turmas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends turmasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, turmasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'turmas'> extends True ? Prisma__turmasClient<turmasGetPayload<T>> : Prisma__turmasClient<turmasGetPayload<T> | null, null>

    /**
     * Find one Turmas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {turmasFindUniqueOrThrowArgs} args - Arguments to find a Turmas
     * @example
     * // Get one Turmas
     * const turmas = await prisma.turmas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends turmasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, turmasFindUniqueOrThrowArgs>
    ): Prisma__turmasClient<turmasGetPayload<T>>

    /**
     * Find the first Turmas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmasFindFirstArgs} args - Arguments to find a Turmas
     * @example
     * // Get one Turmas
     * const turmas = await prisma.turmas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends turmasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, turmasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'turmas'> extends True ? Prisma__turmasClient<turmasGetPayload<T>> : Prisma__turmasClient<turmasGetPayload<T> | null, null>

    /**
     * Find the first Turmas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmasFindFirstOrThrowArgs} args - Arguments to find a Turmas
     * @example
     * // Get one Turmas
     * const turmas = await prisma.turmas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends turmasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, turmasFindFirstOrThrowArgs>
    ): Prisma__turmasClient<turmasGetPayload<T>>

    /**
     * Find zero or more Turmas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Turmas
     * const turmas = await prisma.turmas.findMany()
     * 
     * // Get first 10 Turmas
     * const turmas = await prisma.turmas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turmasWithIdOnly = await prisma.turmas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends turmasFindManyArgs>(
      args?: SelectSubset<T, turmasFindManyArgs>
    ): Prisma.PrismaPromise<Array<turmasGetPayload<T>>>

    /**
     * Create a Turmas.
     * @param {turmasCreateArgs} args - Arguments to create a Turmas.
     * @example
     * // Create one Turmas
     * const Turmas = await prisma.turmas.create({
     *   data: {
     *     // ... data to create a Turmas
     *   }
     * })
     * 
    **/
    create<T extends turmasCreateArgs>(
      args: SelectSubset<T, turmasCreateArgs>
    ): Prisma__turmasClient<turmasGetPayload<T>>

    /**
     * Create many Turmas.
     *     @param {turmasCreateManyArgs} args - Arguments to create many Turmas.
     *     @example
     *     // Create many Turmas
     *     const turmas = await prisma.turmas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends turmasCreateManyArgs>(
      args?: SelectSubset<T, turmasCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Turmas.
     * @param {turmasDeleteArgs} args - Arguments to delete one Turmas.
     * @example
     * // Delete one Turmas
     * const Turmas = await prisma.turmas.delete({
     *   where: {
     *     // ... filter to delete one Turmas
     *   }
     * })
     * 
    **/
    delete<T extends turmasDeleteArgs>(
      args: SelectSubset<T, turmasDeleteArgs>
    ): Prisma__turmasClient<turmasGetPayload<T>>

    /**
     * Update one Turmas.
     * @param {turmasUpdateArgs} args - Arguments to update one Turmas.
     * @example
     * // Update one Turmas
     * const turmas = await prisma.turmas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends turmasUpdateArgs>(
      args: SelectSubset<T, turmasUpdateArgs>
    ): Prisma__turmasClient<turmasGetPayload<T>>

    /**
     * Delete zero or more Turmas.
     * @param {turmasDeleteManyArgs} args - Arguments to filter Turmas to delete.
     * @example
     * // Delete a few Turmas
     * const { count } = await prisma.turmas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends turmasDeleteManyArgs>(
      args?: SelectSubset<T, turmasDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Turmas
     * const turmas = await prisma.turmas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends turmasUpdateManyArgs>(
      args: SelectSubset<T, turmasUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Turmas.
     * @param {turmasUpsertArgs} args - Arguments to update or create a Turmas.
     * @example
     * // Update or create a Turmas
     * const turmas = await prisma.turmas.upsert({
     *   create: {
     *     // ... data to create a Turmas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Turmas we want to update
     *   }
     * })
    **/
    upsert<T extends turmasUpsertArgs>(
      args: SelectSubset<T, turmasUpsertArgs>
    ): Prisma__turmasClient<turmasGetPayload<T>>

    /**
     * Count the number of Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmasCountArgs} args - Arguments to filter Turmas to count.
     * @example
     * // Count the number of Turmas
     * const count = await prisma.turmas.count({
     *   where: {
     *     // ... the filter for the Turmas we want to count
     *   }
     * })
    **/
    count<T extends turmasCountArgs>(
      args?: Subset<T, turmasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurmasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurmasAggregateArgs>(args: Subset<T, TurmasAggregateArgs>): Prisma.PrismaPromise<GetTurmasAggregateType<T>>

    /**
     * Group by Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TurmasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TurmasGroupByArgs['orderBy'] }
        : { orderBy?: TurmasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TurmasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurmasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for turmas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__turmasClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    alunos<T extends turmas$alunosArgs= {}>(args?: Subset<T, turmas$alunosArgs>): Prisma.PrismaPromise<Array<alunosGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * turmas base type for findUnique actions
   */
  export type turmasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: turmasInclude | null
    /**
     * Filter, which turmas to fetch.
     */
    where: turmasWhereUniqueInput
  }

  /**
   * turmas findUnique
   */
  export interface turmasFindUniqueArgs extends turmasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * turmas findUniqueOrThrow
   */
  export type turmasFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: turmasInclude | null
    /**
     * Filter, which turmas to fetch.
     */
    where: turmasWhereUniqueInput
  }


  /**
   * turmas base type for findFirst actions
   */
  export type turmasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: turmasInclude | null
    /**
     * Filter, which turmas to fetch.
     */
    where?: turmasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of turmas to fetch.
     */
    orderBy?: Enumerable<turmasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for turmas.
     */
    cursor?: turmasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of turmas.
     */
    distinct?: Enumerable<TurmasScalarFieldEnum>
  }

  /**
   * turmas findFirst
   */
  export interface turmasFindFirstArgs extends turmasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * turmas findFirstOrThrow
   */
  export type turmasFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: turmasInclude | null
    /**
     * Filter, which turmas to fetch.
     */
    where?: turmasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of turmas to fetch.
     */
    orderBy?: Enumerable<turmasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for turmas.
     */
    cursor?: turmasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of turmas.
     */
    distinct?: Enumerable<TurmasScalarFieldEnum>
  }


  /**
   * turmas findMany
   */
  export type turmasFindManyArgs = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: turmasInclude | null
    /**
     * Filter, which turmas to fetch.
     */
    where?: turmasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of turmas to fetch.
     */
    orderBy?: Enumerable<turmasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing turmas.
     */
    cursor?: turmasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` turmas.
     */
    skip?: number
    distinct?: Enumerable<TurmasScalarFieldEnum>
  }


  /**
   * turmas create
   */
  export type turmasCreateArgs = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: turmasInclude | null
    /**
     * The data needed to create a turmas.
     */
    data: XOR<turmasCreateInput, turmasUncheckedCreateInput>
  }


  /**
   * turmas createMany
   */
  export type turmasCreateManyArgs = {
    /**
     * The data used to create many turmas.
     */
    data: Enumerable<turmasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * turmas update
   */
  export type turmasUpdateArgs = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: turmasInclude | null
    /**
     * The data needed to update a turmas.
     */
    data: XOR<turmasUpdateInput, turmasUncheckedUpdateInput>
    /**
     * Choose, which turmas to update.
     */
    where: turmasWhereUniqueInput
  }


  /**
   * turmas updateMany
   */
  export type turmasUpdateManyArgs = {
    /**
     * The data used to update turmas.
     */
    data: XOR<turmasUpdateManyMutationInput, turmasUncheckedUpdateManyInput>
    /**
     * Filter which turmas to update
     */
    where?: turmasWhereInput
  }


  /**
   * turmas upsert
   */
  export type turmasUpsertArgs = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: turmasInclude | null
    /**
     * The filter to search for the turmas to update in case it exists.
     */
    where: turmasWhereUniqueInput
    /**
     * In case the turmas found by the `where` argument doesn't exist, create a new turmas with this data.
     */
    create: XOR<turmasCreateInput, turmasUncheckedCreateInput>
    /**
     * In case the turmas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<turmasUpdateInput, turmasUncheckedUpdateInput>
  }


  /**
   * turmas delete
   */
  export type turmasDeleteArgs = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: turmasInclude | null
    /**
     * Filter which turmas to delete.
     */
    where: turmasWhereUniqueInput
  }


  /**
   * turmas deleteMany
   */
  export type turmasDeleteManyArgs = {
    /**
     * Filter which turmas to delete
     */
    where?: turmasWhereInput
  }


  /**
   * turmas.alunos
   */
  export type turmas$alunosArgs = {
    /**
     * Select specific fields to fetch from the alunos
     */
    select?: alunosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: alunosInclude | null
    where?: alunosWhereInput
    orderBy?: Enumerable<alunosOrderByWithRelationInput>
    cursor?: alunosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AlunosScalarFieldEnum>
  }


  /**
   * turmas without action
   */
  export type turmasArgs = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: turmasInclude | null
  }



  /**
   * Model professores
   */


  export type AggregateProfessores = {
    _count: ProfessoresCountAggregateOutputType | null
    _avg: ProfessoresAvgAggregateOutputType | null
    _sum: ProfessoresSumAggregateOutputType | null
    _min: ProfessoresMinAggregateOutputType | null
    _max: ProfessoresMaxAggregateOutputType | null
  }

  export type ProfessoresAvgAggregateOutputType = {
    id: number | null
    matricula: number | null
  }

  export type ProfessoresSumAggregateOutputType = {
    id: number | null
    matricula: number | null
  }

  export type ProfessoresMinAggregateOutputType = {
    id: number | null
    matricula: number | null
    senha: string | null
  }

  export type ProfessoresMaxAggregateOutputType = {
    id: number | null
    matricula: number | null
    senha: string | null
  }

  export type ProfessoresCountAggregateOutputType = {
    id: number
    matricula: number
    senha: number
    _all: number
  }


  export type ProfessoresAvgAggregateInputType = {
    id?: true
    matricula?: true
  }

  export type ProfessoresSumAggregateInputType = {
    id?: true
    matricula?: true
  }

  export type ProfessoresMinAggregateInputType = {
    id?: true
    matricula?: true
    senha?: true
  }

  export type ProfessoresMaxAggregateInputType = {
    id?: true
    matricula?: true
    senha?: true
  }

  export type ProfessoresCountAggregateInputType = {
    id?: true
    matricula?: true
    senha?: true
    _all?: true
  }

  export type ProfessoresAggregateArgs = {
    /**
     * Filter which professores to aggregate.
     */
    where?: professoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professores to fetch.
     */
    orderBy?: Enumerable<professoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: professoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned professores
    **/
    _count?: true | ProfessoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessoresMaxAggregateInputType
  }

  export type GetProfessoresAggregateType<T extends ProfessoresAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessores[P]>
      : GetScalarType<T[P], AggregateProfessores[P]>
  }




  export type ProfessoresGroupByArgs = {
    where?: professoresWhereInput
    orderBy?: Enumerable<professoresOrderByWithAggregationInput>
    by: ProfessoresScalarFieldEnum[]
    having?: professoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessoresCountAggregateInputType | true
    _avg?: ProfessoresAvgAggregateInputType
    _sum?: ProfessoresSumAggregateInputType
    _min?: ProfessoresMinAggregateInputType
    _max?: ProfessoresMaxAggregateInputType
  }


  export type ProfessoresGroupByOutputType = {
    id: number
    matricula: number
    senha: string
    _count: ProfessoresCountAggregateOutputType | null
    _avg: ProfessoresAvgAggregateOutputType | null
    _sum: ProfessoresSumAggregateOutputType | null
    _min: ProfessoresMinAggregateOutputType | null
    _max: ProfessoresMaxAggregateOutputType | null
  }

  type GetProfessoresGroupByPayload<T extends ProfessoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProfessoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessoresGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessoresGroupByOutputType[P]>
        }
      >
    >


  export type professoresSelect = {
    id?: boolean
    matricula?: boolean
    senha?: boolean
  }


  export type professoresGetPayload<S extends boolean | null | undefined | professoresArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? professores :
    S extends undefined ? never :
    S extends { include: any } & (professoresArgs | professoresFindManyArgs)
    ? professores 
    : S extends { select: any } & (professoresArgs | professoresFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof professores ? professores[P] : never
  } 
      : professores


  type professoresCountArgs = 
    Omit<professoresFindManyArgs, 'select' | 'include'> & {
      select?: ProfessoresCountAggregateInputType | true
    }

  export interface professoresDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Professores that matches the filter.
     * @param {professoresFindUniqueArgs} args - Arguments to find a Professores
     * @example
     * // Get one Professores
     * const professores = await prisma.professores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends professoresFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, professoresFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'professores'> extends True ? Prisma__professoresClient<professoresGetPayload<T>> : Prisma__professoresClient<professoresGetPayload<T> | null, null>

    /**
     * Find one Professores that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {professoresFindUniqueOrThrowArgs} args - Arguments to find a Professores
     * @example
     * // Get one Professores
     * const professores = await prisma.professores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends professoresFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, professoresFindUniqueOrThrowArgs>
    ): Prisma__professoresClient<professoresGetPayload<T>>

    /**
     * Find the first Professores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professoresFindFirstArgs} args - Arguments to find a Professores
     * @example
     * // Get one Professores
     * const professores = await prisma.professores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends professoresFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, professoresFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'professores'> extends True ? Prisma__professoresClient<professoresGetPayload<T>> : Prisma__professoresClient<professoresGetPayload<T> | null, null>

    /**
     * Find the first Professores that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professoresFindFirstOrThrowArgs} args - Arguments to find a Professores
     * @example
     * // Get one Professores
     * const professores = await prisma.professores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends professoresFindFirstOrThrowArgs>(
      args?: SelectSubset<T, professoresFindFirstOrThrowArgs>
    ): Prisma__professoresClient<professoresGetPayload<T>>

    /**
     * Find zero or more Professores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professoresFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professores
     * const professores = await prisma.professores.findMany()
     * 
     * // Get first 10 Professores
     * const professores = await prisma.professores.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professoresWithIdOnly = await prisma.professores.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends professoresFindManyArgs>(
      args?: SelectSubset<T, professoresFindManyArgs>
    ): Prisma.PrismaPromise<Array<professoresGetPayload<T>>>

    /**
     * Create a Professores.
     * @param {professoresCreateArgs} args - Arguments to create a Professores.
     * @example
     * // Create one Professores
     * const Professores = await prisma.professores.create({
     *   data: {
     *     // ... data to create a Professores
     *   }
     * })
     * 
    **/
    create<T extends professoresCreateArgs>(
      args: SelectSubset<T, professoresCreateArgs>
    ): Prisma__professoresClient<professoresGetPayload<T>>

    /**
     * Create many Professores.
     *     @param {professoresCreateManyArgs} args - Arguments to create many Professores.
     *     @example
     *     // Create many Professores
     *     const professores = await prisma.professores.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends professoresCreateManyArgs>(
      args?: SelectSubset<T, professoresCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Professores.
     * @param {professoresDeleteArgs} args - Arguments to delete one Professores.
     * @example
     * // Delete one Professores
     * const Professores = await prisma.professores.delete({
     *   where: {
     *     // ... filter to delete one Professores
     *   }
     * })
     * 
    **/
    delete<T extends professoresDeleteArgs>(
      args: SelectSubset<T, professoresDeleteArgs>
    ): Prisma__professoresClient<professoresGetPayload<T>>

    /**
     * Update one Professores.
     * @param {professoresUpdateArgs} args - Arguments to update one Professores.
     * @example
     * // Update one Professores
     * const professores = await prisma.professores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends professoresUpdateArgs>(
      args: SelectSubset<T, professoresUpdateArgs>
    ): Prisma__professoresClient<professoresGetPayload<T>>

    /**
     * Delete zero or more Professores.
     * @param {professoresDeleteManyArgs} args - Arguments to filter Professores to delete.
     * @example
     * // Delete a few Professores
     * const { count } = await prisma.professores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends professoresDeleteManyArgs>(
      args?: SelectSubset<T, professoresDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professores
     * const professores = await prisma.professores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends professoresUpdateManyArgs>(
      args: SelectSubset<T, professoresUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Professores.
     * @param {professoresUpsertArgs} args - Arguments to update or create a Professores.
     * @example
     * // Update or create a Professores
     * const professores = await prisma.professores.upsert({
     *   create: {
     *     // ... data to create a Professores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professores we want to update
     *   }
     * })
    **/
    upsert<T extends professoresUpsertArgs>(
      args: SelectSubset<T, professoresUpsertArgs>
    ): Prisma__professoresClient<professoresGetPayload<T>>

    /**
     * Count the number of Professores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professoresCountArgs} args - Arguments to filter Professores to count.
     * @example
     * // Count the number of Professores
     * const count = await prisma.professores.count({
     *   where: {
     *     // ... the filter for the Professores we want to count
     *   }
     * })
    **/
    count<T extends professoresCountArgs>(
      args?: Subset<T, professoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessoresAggregateArgs>(args: Subset<T, ProfessoresAggregateArgs>): Prisma.PrismaPromise<GetProfessoresAggregateType<T>>

    /**
     * Group by Professores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessoresGroupByArgs['orderBy'] }
        : { orderBy?: ProfessoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for professores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__professoresClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * professores base type for findUnique actions
   */
  export type professoresFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the professores
     */
    select?: professoresSelect | null
    /**
     * Filter, which professores to fetch.
     */
    where: professoresWhereUniqueInput
  }

  /**
   * professores findUnique
   */
  export interface professoresFindUniqueArgs extends professoresFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * professores findUniqueOrThrow
   */
  export type professoresFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the professores
     */
    select?: professoresSelect | null
    /**
     * Filter, which professores to fetch.
     */
    where: professoresWhereUniqueInput
  }


  /**
   * professores base type for findFirst actions
   */
  export type professoresFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the professores
     */
    select?: professoresSelect | null
    /**
     * Filter, which professores to fetch.
     */
    where?: professoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professores to fetch.
     */
    orderBy?: Enumerable<professoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for professores.
     */
    cursor?: professoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of professores.
     */
    distinct?: Enumerable<ProfessoresScalarFieldEnum>
  }

  /**
   * professores findFirst
   */
  export interface professoresFindFirstArgs extends professoresFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * professores findFirstOrThrow
   */
  export type professoresFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the professores
     */
    select?: professoresSelect | null
    /**
     * Filter, which professores to fetch.
     */
    where?: professoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professores to fetch.
     */
    orderBy?: Enumerable<professoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for professores.
     */
    cursor?: professoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of professores.
     */
    distinct?: Enumerable<ProfessoresScalarFieldEnum>
  }


  /**
   * professores findMany
   */
  export type professoresFindManyArgs = {
    /**
     * Select specific fields to fetch from the professores
     */
    select?: professoresSelect | null
    /**
     * Filter, which professores to fetch.
     */
    where?: professoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professores to fetch.
     */
    orderBy?: Enumerable<professoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing professores.
     */
    cursor?: professoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professores.
     */
    skip?: number
    distinct?: Enumerable<ProfessoresScalarFieldEnum>
  }


  /**
   * professores create
   */
  export type professoresCreateArgs = {
    /**
     * Select specific fields to fetch from the professores
     */
    select?: professoresSelect | null
    /**
     * The data needed to create a professores.
     */
    data: XOR<professoresCreateInput, professoresUncheckedCreateInput>
  }


  /**
   * professores createMany
   */
  export type professoresCreateManyArgs = {
    /**
     * The data used to create many professores.
     */
    data: Enumerable<professoresCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * professores update
   */
  export type professoresUpdateArgs = {
    /**
     * Select specific fields to fetch from the professores
     */
    select?: professoresSelect | null
    /**
     * The data needed to update a professores.
     */
    data: XOR<professoresUpdateInput, professoresUncheckedUpdateInput>
    /**
     * Choose, which professores to update.
     */
    where: professoresWhereUniqueInput
  }


  /**
   * professores updateMany
   */
  export type professoresUpdateManyArgs = {
    /**
     * The data used to update professores.
     */
    data: XOR<professoresUpdateManyMutationInput, professoresUncheckedUpdateManyInput>
    /**
     * Filter which professores to update
     */
    where?: professoresWhereInput
  }


  /**
   * professores upsert
   */
  export type professoresUpsertArgs = {
    /**
     * Select specific fields to fetch from the professores
     */
    select?: professoresSelect | null
    /**
     * The filter to search for the professores to update in case it exists.
     */
    where: professoresWhereUniqueInput
    /**
     * In case the professores found by the `where` argument doesn't exist, create a new professores with this data.
     */
    create: XOR<professoresCreateInput, professoresUncheckedCreateInput>
    /**
     * In case the professores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<professoresUpdateInput, professoresUncheckedUpdateInput>
  }


  /**
   * professores delete
   */
  export type professoresDeleteArgs = {
    /**
     * Select specific fields to fetch from the professores
     */
    select?: professoresSelect | null
    /**
     * Filter which professores to delete.
     */
    where: professoresWhereUniqueInput
  }


  /**
   * professores deleteMany
   */
  export type professoresDeleteManyArgs = {
    /**
     * Filter which professores to delete
     */
    where?: professoresWhereInput
  }


  /**
   * professores without action
   */
  export type professoresArgs = {
    /**
     * Select specific fields to fetch from the professores
     */
    select?: professoresSelect | null
  }



  /**
   * Model alunos
   */


  export type AggregateAlunos = {
    _count: AlunosCountAggregateOutputType | null
    _avg: AlunosAvgAggregateOutputType | null
    _sum: AlunosSumAggregateOutputType | null
    _min: AlunosMinAggregateOutputType | null
    _max: AlunosMaxAggregateOutputType | null
  }

  export type AlunosAvgAggregateOutputType = {
    id: number | null
  }

  export type AlunosSumAggregateOutputType = {
    id: number | null
  }

  export type AlunosMinAggregateOutputType = {
    id: number | null
    email: string | null
    senha: string | null
    nome: string | null
  }

  export type AlunosMaxAggregateOutputType = {
    id: number | null
    email: string | null
    senha: string | null
    nome: string | null
  }

  export type AlunosCountAggregateOutputType = {
    id: number
    email: number
    senha: number
    nome: number
    _all: number
  }


  export type AlunosAvgAggregateInputType = {
    id?: true
  }

  export type AlunosSumAggregateInputType = {
    id?: true
  }

  export type AlunosMinAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    nome?: true
  }

  export type AlunosMaxAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    nome?: true
  }

  export type AlunosCountAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    nome?: true
    _all?: true
  }

  export type AlunosAggregateArgs = {
    /**
     * Filter which alunos to aggregate.
     */
    where?: alunosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alunos to fetch.
     */
    orderBy?: Enumerable<alunosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: alunosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned alunos
    **/
    _count?: true | AlunosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlunosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlunosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlunosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlunosMaxAggregateInputType
  }

  export type GetAlunosAggregateType<T extends AlunosAggregateArgs> = {
        [P in keyof T & keyof AggregateAlunos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlunos[P]>
      : GetScalarType<T[P], AggregateAlunos[P]>
  }




  export type AlunosGroupByArgs = {
    where?: alunosWhereInput
    orderBy?: Enumerable<alunosOrderByWithAggregationInput>
    by: AlunosScalarFieldEnum[]
    having?: alunosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlunosCountAggregateInputType | true
    _avg?: AlunosAvgAggregateInputType
    _sum?: AlunosSumAggregateInputType
    _min?: AlunosMinAggregateInputType
    _max?: AlunosMaxAggregateInputType
  }


  export type AlunosGroupByOutputType = {
    id: number
    email: string
    senha: string
    nome: string | null
    _count: AlunosCountAggregateOutputType | null
    _avg: AlunosAvgAggregateOutputType | null
    _sum: AlunosSumAggregateOutputType | null
    _min: AlunosMinAggregateOutputType | null
    _max: AlunosMaxAggregateOutputType | null
  }

  type GetAlunosGroupByPayload<T extends AlunosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AlunosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlunosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlunosGroupByOutputType[P]>
            : GetScalarType<T[P], AlunosGroupByOutputType[P]>
        }
      >
    >


  export type alunosSelect = {
    id?: boolean
    email?: boolean
    senha?: boolean
    nome?: boolean
    turmas?: boolean | alunos$turmasArgs
    _count?: boolean | AlunosCountOutputTypeArgs
  }


  export type alunosInclude = {
    turmas?: boolean | alunos$turmasArgs
    _count?: boolean | AlunosCountOutputTypeArgs
  }

  export type alunosGetPayload<S extends boolean | null | undefined | alunosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? alunos :
    S extends undefined ? never :
    S extends { include: any } & (alunosArgs | alunosFindManyArgs)
    ? alunos  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'turmas' ? Array < turmasGetPayload<S['include'][P]>>  :
        P extends '_count' ? AlunosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (alunosArgs | alunosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'turmas' ? Array < turmasGetPayload<S['select'][P]>>  :
        P extends '_count' ? AlunosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof alunos ? alunos[P] : never
  } 
      : alunos


  type alunosCountArgs = 
    Omit<alunosFindManyArgs, 'select' | 'include'> & {
      select?: AlunosCountAggregateInputType | true
    }

  export interface alunosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Alunos that matches the filter.
     * @param {alunosFindUniqueArgs} args - Arguments to find a Alunos
     * @example
     * // Get one Alunos
     * const alunos = await prisma.alunos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends alunosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, alunosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'alunos'> extends True ? Prisma__alunosClient<alunosGetPayload<T>> : Prisma__alunosClient<alunosGetPayload<T> | null, null>

    /**
     * Find one Alunos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {alunosFindUniqueOrThrowArgs} args - Arguments to find a Alunos
     * @example
     * // Get one Alunos
     * const alunos = await prisma.alunos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends alunosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, alunosFindUniqueOrThrowArgs>
    ): Prisma__alunosClient<alunosGetPayload<T>>

    /**
     * Find the first Alunos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alunosFindFirstArgs} args - Arguments to find a Alunos
     * @example
     * // Get one Alunos
     * const alunos = await prisma.alunos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends alunosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, alunosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'alunos'> extends True ? Prisma__alunosClient<alunosGetPayload<T>> : Prisma__alunosClient<alunosGetPayload<T> | null, null>

    /**
     * Find the first Alunos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alunosFindFirstOrThrowArgs} args - Arguments to find a Alunos
     * @example
     * // Get one Alunos
     * const alunos = await prisma.alunos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends alunosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, alunosFindFirstOrThrowArgs>
    ): Prisma__alunosClient<alunosGetPayload<T>>

    /**
     * Find zero or more Alunos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alunosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alunos
     * const alunos = await prisma.alunos.findMany()
     * 
     * // Get first 10 Alunos
     * const alunos = await prisma.alunos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alunosWithIdOnly = await prisma.alunos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends alunosFindManyArgs>(
      args?: SelectSubset<T, alunosFindManyArgs>
    ): Prisma.PrismaPromise<Array<alunosGetPayload<T>>>

    /**
     * Create a Alunos.
     * @param {alunosCreateArgs} args - Arguments to create a Alunos.
     * @example
     * // Create one Alunos
     * const Alunos = await prisma.alunos.create({
     *   data: {
     *     // ... data to create a Alunos
     *   }
     * })
     * 
    **/
    create<T extends alunosCreateArgs>(
      args: SelectSubset<T, alunosCreateArgs>
    ): Prisma__alunosClient<alunosGetPayload<T>>

    /**
     * Create many Alunos.
     *     @param {alunosCreateManyArgs} args - Arguments to create many Alunos.
     *     @example
     *     // Create many Alunos
     *     const alunos = await prisma.alunos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends alunosCreateManyArgs>(
      args?: SelectSubset<T, alunosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alunos.
     * @param {alunosDeleteArgs} args - Arguments to delete one Alunos.
     * @example
     * // Delete one Alunos
     * const Alunos = await prisma.alunos.delete({
     *   where: {
     *     // ... filter to delete one Alunos
     *   }
     * })
     * 
    **/
    delete<T extends alunosDeleteArgs>(
      args: SelectSubset<T, alunosDeleteArgs>
    ): Prisma__alunosClient<alunosGetPayload<T>>

    /**
     * Update one Alunos.
     * @param {alunosUpdateArgs} args - Arguments to update one Alunos.
     * @example
     * // Update one Alunos
     * const alunos = await prisma.alunos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends alunosUpdateArgs>(
      args: SelectSubset<T, alunosUpdateArgs>
    ): Prisma__alunosClient<alunosGetPayload<T>>

    /**
     * Delete zero or more Alunos.
     * @param {alunosDeleteManyArgs} args - Arguments to filter Alunos to delete.
     * @example
     * // Delete a few Alunos
     * const { count } = await prisma.alunos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends alunosDeleteManyArgs>(
      args?: SelectSubset<T, alunosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alunosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alunos
     * const alunos = await prisma.alunos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends alunosUpdateManyArgs>(
      args: SelectSubset<T, alunosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alunos.
     * @param {alunosUpsertArgs} args - Arguments to update or create a Alunos.
     * @example
     * // Update or create a Alunos
     * const alunos = await prisma.alunos.upsert({
     *   create: {
     *     // ... data to create a Alunos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alunos we want to update
     *   }
     * })
    **/
    upsert<T extends alunosUpsertArgs>(
      args: SelectSubset<T, alunosUpsertArgs>
    ): Prisma__alunosClient<alunosGetPayload<T>>

    /**
     * Count the number of Alunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alunosCountArgs} args - Arguments to filter Alunos to count.
     * @example
     * // Count the number of Alunos
     * const count = await prisma.alunos.count({
     *   where: {
     *     // ... the filter for the Alunos we want to count
     *   }
     * })
    **/
    count<T extends alunosCountArgs>(
      args?: Subset<T, alunosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlunosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlunosAggregateArgs>(args: Subset<T, AlunosAggregateArgs>): Prisma.PrismaPromise<GetAlunosAggregateType<T>>

    /**
     * Group by Alunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlunosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlunosGroupByArgs['orderBy'] }
        : { orderBy?: AlunosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlunosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlunosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for alunos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__alunosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    turmas<T extends alunos$turmasArgs= {}>(args?: Subset<T, alunos$turmasArgs>): Prisma.PrismaPromise<Array<turmasGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * alunos base type for findUnique actions
   */
  export type alunosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the alunos
     */
    select?: alunosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: alunosInclude | null
    /**
     * Filter, which alunos to fetch.
     */
    where: alunosWhereUniqueInput
  }

  /**
   * alunos findUnique
   */
  export interface alunosFindUniqueArgs extends alunosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * alunos findUniqueOrThrow
   */
  export type alunosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the alunos
     */
    select?: alunosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: alunosInclude | null
    /**
     * Filter, which alunos to fetch.
     */
    where: alunosWhereUniqueInput
  }


  /**
   * alunos base type for findFirst actions
   */
  export type alunosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the alunos
     */
    select?: alunosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: alunosInclude | null
    /**
     * Filter, which alunos to fetch.
     */
    where?: alunosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alunos to fetch.
     */
    orderBy?: Enumerable<alunosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alunos.
     */
    cursor?: alunosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alunos.
     */
    distinct?: Enumerable<AlunosScalarFieldEnum>
  }

  /**
   * alunos findFirst
   */
  export interface alunosFindFirstArgs extends alunosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * alunos findFirstOrThrow
   */
  export type alunosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the alunos
     */
    select?: alunosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: alunosInclude | null
    /**
     * Filter, which alunos to fetch.
     */
    where?: alunosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alunos to fetch.
     */
    orderBy?: Enumerable<alunosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alunos.
     */
    cursor?: alunosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alunos.
     */
    distinct?: Enumerable<AlunosScalarFieldEnum>
  }


  /**
   * alunos findMany
   */
  export type alunosFindManyArgs = {
    /**
     * Select specific fields to fetch from the alunos
     */
    select?: alunosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: alunosInclude | null
    /**
     * Filter, which alunos to fetch.
     */
    where?: alunosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alunos to fetch.
     */
    orderBy?: Enumerable<alunosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing alunos.
     */
    cursor?: alunosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alunos.
     */
    skip?: number
    distinct?: Enumerable<AlunosScalarFieldEnum>
  }


  /**
   * alunos create
   */
  export type alunosCreateArgs = {
    /**
     * Select specific fields to fetch from the alunos
     */
    select?: alunosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: alunosInclude | null
    /**
     * The data needed to create a alunos.
     */
    data: XOR<alunosCreateInput, alunosUncheckedCreateInput>
  }


  /**
   * alunos createMany
   */
  export type alunosCreateManyArgs = {
    /**
     * The data used to create many alunos.
     */
    data: Enumerable<alunosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * alunos update
   */
  export type alunosUpdateArgs = {
    /**
     * Select specific fields to fetch from the alunos
     */
    select?: alunosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: alunosInclude | null
    /**
     * The data needed to update a alunos.
     */
    data: XOR<alunosUpdateInput, alunosUncheckedUpdateInput>
    /**
     * Choose, which alunos to update.
     */
    where: alunosWhereUniqueInput
  }


  /**
   * alunos updateMany
   */
  export type alunosUpdateManyArgs = {
    /**
     * The data used to update alunos.
     */
    data: XOR<alunosUpdateManyMutationInput, alunosUncheckedUpdateManyInput>
    /**
     * Filter which alunos to update
     */
    where?: alunosWhereInput
  }


  /**
   * alunos upsert
   */
  export type alunosUpsertArgs = {
    /**
     * Select specific fields to fetch from the alunos
     */
    select?: alunosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: alunosInclude | null
    /**
     * The filter to search for the alunos to update in case it exists.
     */
    where: alunosWhereUniqueInput
    /**
     * In case the alunos found by the `where` argument doesn't exist, create a new alunos with this data.
     */
    create: XOR<alunosCreateInput, alunosUncheckedCreateInput>
    /**
     * In case the alunos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<alunosUpdateInput, alunosUncheckedUpdateInput>
  }


  /**
   * alunos delete
   */
  export type alunosDeleteArgs = {
    /**
     * Select specific fields to fetch from the alunos
     */
    select?: alunosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: alunosInclude | null
    /**
     * Filter which alunos to delete.
     */
    where: alunosWhereUniqueInput
  }


  /**
   * alunos deleteMany
   */
  export type alunosDeleteManyArgs = {
    /**
     * Filter which alunos to delete
     */
    where?: alunosWhereInput
  }


  /**
   * alunos.turmas
   */
  export type alunos$turmasArgs = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: turmasInclude | null
    where?: turmasWhereInput
    orderBy?: Enumerable<turmasOrderByWithRelationInput>
    cursor?: turmasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TurmasScalarFieldEnum>
  }


  /**
   * alunos without action
   */
  export type alunosArgs = {
    /**
     * Select specific fields to fetch from the alunos
     */
    select?: alunosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: alunosInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AlunosScalarFieldEnum: {
    id: 'id',
    email: 'email',
    senha: 'senha',
    nome: 'nome'
  };

  export type AlunosScalarFieldEnum = (typeof AlunosScalarFieldEnum)[keyof typeof AlunosScalarFieldEnum]


  export const ProfessoresScalarFieldEnum: {
    id: 'id',
    matricula: 'matricula',
    senha: 'senha'
  };

  export type ProfessoresScalarFieldEnum = (typeof ProfessoresScalarFieldEnum)[keyof typeof ProfessoresScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TurmasScalarFieldEnum: {
    id: 'id'
  };

  export type TurmasScalarFieldEnum = (typeof TurmasScalarFieldEnum)[keyof typeof TurmasScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type turmasWhereInput = {
    AND?: Enumerable<turmasWhereInput>
    OR?: Enumerable<turmasWhereInput>
    NOT?: Enumerable<turmasWhereInput>
    id?: IntFilter | number
    alunos?: AlunosListRelationFilter
  }

  export type turmasOrderByWithRelationInput = {
    id?: SortOrder
    alunos?: alunosOrderByRelationAggregateInput
  }

  export type turmasWhereUniqueInput = {
    id?: number
  }

  export type turmasOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: turmasCountOrderByAggregateInput
    _avg?: turmasAvgOrderByAggregateInput
    _max?: turmasMaxOrderByAggregateInput
    _min?: turmasMinOrderByAggregateInput
    _sum?: turmasSumOrderByAggregateInput
  }

  export type turmasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<turmasScalarWhereWithAggregatesInput>
    OR?: Enumerable<turmasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<turmasScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
  }

  export type professoresWhereInput = {
    AND?: Enumerable<professoresWhereInput>
    OR?: Enumerable<professoresWhereInput>
    NOT?: Enumerable<professoresWhereInput>
    id?: IntFilter | number
    matricula?: IntFilter | number
    senha?: StringFilter | string
  }

  export type professoresOrderByWithRelationInput = {
    id?: SortOrder
    matricula?: SortOrder
    senha?: SortOrder
  }

  export type professoresWhereUniqueInput = {
    id?: number
    matricula?: number
  }

  export type professoresOrderByWithAggregationInput = {
    id?: SortOrder
    matricula?: SortOrder
    senha?: SortOrder
    _count?: professoresCountOrderByAggregateInput
    _avg?: professoresAvgOrderByAggregateInput
    _max?: professoresMaxOrderByAggregateInput
    _min?: professoresMinOrderByAggregateInput
    _sum?: professoresSumOrderByAggregateInput
  }

  export type professoresScalarWhereWithAggregatesInput = {
    AND?: Enumerable<professoresScalarWhereWithAggregatesInput>
    OR?: Enumerable<professoresScalarWhereWithAggregatesInput>
    NOT?: Enumerable<professoresScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    matricula?: IntWithAggregatesFilter | number
    senha?: StringWithAggregatesFilter | string
  }

  export type alunosWhereInput = {
    AND?: Enumerable<alunosWhereInput>
    OR?: Enumerable<alunosWhereInput>
    NOT?: Enumerable<alunosWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    senha?: StringFilter | string
    nome?: StringNullableFilter | string | null
    turmas?: TurmasListRelationFilter
  }

  export type alunosOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
    turmas?: turmasOrderByRelationAggregateInput
  }

  export type alunosWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type alunosOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
    _count?: alunosCountOrderByAggregateInput
    _avg?: alunosAvgOrderByAggregateInput
    _max?: alunosMaxOrderByAggregateInput
    _min?: alunosMinOrderByAggregateInput
    _sum?: alunosSumOrderByAggregateInput
  }

  export type alunosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<alunosScalarWhereWithAggregatesInput>
    OR?: Enumerable<alunosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<alunosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    senha?: StringWithAggregatesFilter | string
    nome?: StringNullableWithAggregatesFilter | string | null
  }

  export type turmasCreateInput = {
    alunos?: alunosCreateNestedManyWithoutTurmasInput
  }

  export type turmasUncheckedCreateInput = {
    id?: number
    alunos?: alunosUncheckedCreateNestedManyWithoutTurmasInput
  }

  export type turmasUpdateInput = {
    alunos?: alunosUpdateManyWithoutTurmasNestedInput
  }

  export type turmasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    alunos?: alunosUncheckedUpdateManyWithoutTurmasNestedInput
  }

  export type turmasCreateManyInput = {
    id?: number
  }

  export type turmasUpdateManyMutationInput = {

  }

  export type turmasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type professoresCreateInput = {
    matricula: number
    senha: string
  }

  export type professoresUncheckedCreateInput = {
    id?: number
    matricula: number
    senha: string
  }

  export type professoresUpdateInput = {
    matricula?: IntFieldUpdateOperationsInput | number
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type professoresUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricula?: IntFieldUpdateOperationsInput | number
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type professoresCreateManyInput = {
    id?: number
    matricula: number
    senha: string
  }

  export type professoresUpdateManyMutationInput = {
    matricula?: IntFieldUpdateOperationsInput | number
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type professoresUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricula?: IntFieldUpdateOperationsInput | number
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type alunosCreateInput = {
    email: string
    senha: string
    nome?: string | null
    turmas?: turmasCreateNestedManyWithoutAlunosInput
  }

  export type alunosUncheckedCreateInput = {
    id?: number
    email: string
    senha: string
    nome?: string | null
    turmas?: turmasUncheckedCreateNestedManyWithoutAlunosInput
  }

  export type alunosUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    turmas?: turmasUpdateManyWithoutAlunosNestedInput
  }

  export type alunosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    turmas?: turmasUncheckedUpdateManyWithoutAlunosNestedInput
  }

  export type alunosCreateManyInput = {
    id?: number
    email: string
    senha: string
    nome?: string | null
  }

  export type alunosUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type alunosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type AlunosListRelationFilter = {
    every?: alunosWhereInput
    some?: alunosWhereInput
    none?: alunosWhereInput
  }

  export type alunosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type turmasCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type turmasAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type turmasMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type turmasMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type turmasSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type professoresCountOrderByAggregateInput = {
    id?: SortOrder
    matricula?: SortOrder
    senha?: SortOrder
  }

  export type professoresAvgOrderByAggregateInput = {
    id?: SortOrder
    matricula?: SortOrder
  }

  export type professoresMaxOrderByAggregateInput = {
    id?: SortOrder
    matricula?: SortOrder
    senha?: SortOrder
  }

  export type professoresMinOrderByAggregateInput = {
    id?: SortOrder
    matricula?: SortOrder
    senha?: SortOrder
  }

  export type professoresSumOrderByAggregateInput = {
    id?: SortOrder
    matricula?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type TurmasListRelationFilter = {
    every?: turmasWhereInput
    some?: turmasWhereInput
    none?: turmasWhereInput
  }

  export type turmasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type alunosCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
  }

  export type alunosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type alunosMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
  }

  export type alunosMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
  }

  export type alunosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type alunosCreateNestedManyWithoutTurmasInput = {
    create?: XOR<Enumerable<alunosCreateWithoutTurmasInput>, Enumerable<alunosUncheckedCreateWithoutTurmasInput>>
    connectOrCreate?: Enumerable<alunosCreateOrConnectWithoutTurmasInput>
    connect?: Enumerable<alunosWhereUniqueInput>
  }

  export type alunosUncheckedCreateNestedManyWithoutTurmasInput = {
    create?: XOR<Enumerable<alunosCreateWithoutTurmasInput>, Enumerable<alunosUncheckedCreateWithoutTurmasInput>>
    connectOrCreate?: Enumerable<alunosCreateOrConnectWithoutTurmasInput>
    connect?: Enumerable<alunosWhereUniqueInput>
  }

  export type alunosUpdateManyWithoutTurmasNestedInput = {
    create?: XOR<Enumerable<alunosCreateWithoutTurmasInput>, Enumerable<alunosUncheckedCreateWithoutTurmasInput>>
    connectOrCreate?: Enumerable<alunosCreateOrConnectWithoutTurmasInput>
    upsert?: Enumerable<alunosUpsertWithWhereUniqueWithoutTurmasInput>
    set?: Enumerable<alunosWhereUniqueInput>
    disconnect?: Enumerable<alunosWhereUniqueInput>
    delete?: Enumerable<alunosWhereUniqueInput>
    connect?: Enumerable<alunosWhereUniqueInput>
    update?: Enumerable<alunosUpdateWithWhereUniqueWithoutTurmasInput>
    updateMany?: Enumerable<alunosUpdateManyWithWhereWithoutTurmasInput>
    deleteMany?: Enumerable<alunosScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type alunosUncheckedUpdateManyWithoutTurmasNestedInput = {
    create?: XOR<Enumerable<alunosCreateWithoutTurmasInput>, Enumerable<alunosUncheckedCreateWithoutTurmasInput>>
    connectOrCreate?: Enumerable<alunosCreateOrConnectWithoutTurmasInput>
    upsert?: Enumerable<alunosUpsertWithWhereUniqueWithoutTurmasInput>
    set?: Enumerable<alunosWhereUniqueInput>
    disconnect?: Enumerable<alunosWhereUniqueInput>
    delete?: Enumerable<alunosWhereUniqueInput>
    connect?: Enumerable<alunosWhereUniqueInput>
    update?: Enumerable<alunosUpdateWithWhereUniqueWithoutTurmasInput>
    updateMany?: Enumerable<alunosUpdateManyWithWhereWithoutTurmasInput>
    deleteMany?: Enumerable<alunosScalarWhereInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type turmasCreateNestedManyWithoutAlunosInput = {
    create?: XOR<Enumerable<turmasCreateWithoutAlunosInput>, Enumerable<turmasUncheckedCreateWithoutAlunosInput>>
    connectOrCreate?: Enumerable<turmasCreateOrConnectWithoutAlunosInput>
    connect?: Enumerable<turmasWhereUniqueInput>
  }

  export type turmasUncheckedCreateNestedManyWithoutAlunosInput = {
    create?: XOR<Enumerable<turmasCreateWithoutAlunosInput>, Enumerable<turmasUncheckedCreateWithoutAlunosInput>>
    connectOrCreate?: Enumerable<turmasCreateOrConnectWithoutAlunosInput>
    connect?: Enumerable<turmasWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type turmasUpdateManyWithoutAlunosNestedInput = {
    create?: XOR<Enumerable<turmasCreateWithoutAlunosInput>, Enumerable<turmasUncheckedCreateWithoutAlunosInput>>
    connectOrCreate?: Enumerable<turmasCreateOrConnectWithoutAlunosInput>
    upsert?: Enumerable<turmasUpsertWithWhereUniqueWithoutAlunosInput>
    set?: Enumerable<turmasWhereUniqueInput>
    disconnect?: Enumerable<turmasWhereUniqueInput>
    delete?: Enumerable<turmasWhereUniqueInput>
    connect?: Enumerable<turmasWhereUniqueInput>
    update?: Enumerable<turmasUpdateWithWhereUniqueWithoutAlunosInput>
    updateMany?: Enumerable<turmasUpdateManyWithWhereWithoutAlunosInput>
    deleteMany?: Enumerable<turmasScalarWhereInput>
  }

  export type turmasUncheckedUpdateManyWithoutAlunosNestedInput = {
    create?: XOR<Enumerable<turmasCreateWithoutAlunosInput>, Enumerable<turmasUncheckedCreateWithoutAlunosInput>>
    connectOrCreate?: Enumerable<turmasCreateOrConnectWithoutAlunosInput>
    upsert?: Enumerable<turmasUpsertWithWhereUniqueWithoutAlunosInput>
    set?: Enumerable<turmasWhereUniqueInput>
    disconnect?: Enumerable<turmasWhereUniqueInput>
    delete?: Enumerable<turmasWhereUniqueInput>
    connect?: Enumerable<turmasWhereUniqueInput>
    update?: Enumerable<turmasUpdateWithWhereUniqueWithoutAlunosInput>
    updateMany?: Enumerable<turmasUpdateManyWithWhereWithoutAlunosInput>
    deleteMany?: Enumerable<turmasScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type alunosCreateWithoutTurmasInput = {
    email: string
    senha: string
    nome?: string | null
  }

  export type alunosUncheckedCreateWithoutTurmasInput = {
    id?: number
    email: string
    senha: string
    nome?: string | null
  }

  export type alunosCreateOrConnectWithoutTurmasInput = {
    where: alunosWhereUniqueInput
    create: XOR<alunosCreateWithoutTurmasInput, alunosUncheckedCreateWithoutTurmasInput>
  }

  export type alunosUpsertWithWhereUniqueWithoutTurmasInput = {
    where: alunosWhereUniqueInput
    update: XOR<alunosUpdateWithoutTurmasInput, alunosUncheckedUpdateWithoutTurmasInput>
    create: XOR<alunosCreateWithoutTurmasInput, alunosUncheckedCreateWithoutTurmasInput>
  }

  export type alunosUpdateWithWhereUniqueWithoutTurmasInput = {
    where: alunosWhereUniqueInput
    data: XOR<alunosUpdateWithoutTurmasInput, alunosUncheckedUpdateWithoutTurmasInput>
  }

  export type alunosUpdateManyWithWhereWithoutTurmasInput = {
    where: alunosScalarWhereInput
    data: XOR<alunosUpdateManyMutationInput, alunosUncheckedUpdateManyWithoutAlunosInput>
  }

  export type alunosScalarWhereInput = {
    AND?: Enumerable<alunosScalarWhereInput>
    OR?: Enumerable<alunosScalarWhereInput>
    NOT?: Enumerable<alunosScalarWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    senha?: StringFilter | string
    nome?: StringNullableFilter | string | null
  }

  export type turmasCreateWithoutAlunosInput = {

  }

  export type turmasUncheckedCreateWithoutAlunosInput = {
    id?: number
  }

  export type turmasCreateOrConnectWithoutAlunosInput = {
    where: turmasWhereUniqueInput
    create: XOR<turmasCreateWithoutAlunosInput, turmasUncheckedCreateWithoutAlunosInput>
  }

  export type turmasUpsertWithWhereUniqueWithoutAlunosInput = {
    where: turmasWhereUniqueInput
    update: XOR<turmasUpdateWithoutAlunosInput, turmasUncheckedUpdateWithoutAlunosInput>
    create: XOR<turmasCreateWithoutAlunosInput, turmasUncheckedCreateWithoutAlunosInput>
  }

  export type turmasUpdateWithWhereUniqueWithoutAlunosInput = {
    where: turmasWhereUniqueInput
    data: XOR<turmasUpdateWithoutAlunosInput, turmasUncheckedUpdateWithoutAlunosInput>
  }

  export type turmasUpdateManyWithWhereWithoutAlunosInput = {
    where: turmasScalarWhereInput
    data: XOR<turmasUpdateManyMutationInput, turmasUncheckedUpdateManyWithoutTurmasInput>
  }

  export type turmasScalarWhereInput = {
    AND?: Enumerable<turmasScalarWhereInput>
    OR?: Enumerable<turmasScalarWhereInput>
    NOT?: Enumerable<turmasScalarWhereInput>
    id?: IntFilter | number
  }

  export type alunosUpdateWithoutTurmasInput = {
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type alunosUncheckedUpdateWithoutTurmasInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type alunosUncheckedUpdateManyWithoutAlunosInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type turmasUpdateWithoutAlunosInput = {

  }

  export type turmasUncheckedUpdateWithoutAlunosInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type turmasUncheckedUpdateManyWithoutTurmasInput = {
    id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}